* ;;
#+Title: dumbbells
#+SUBTITLE: dumbbells parametric design
#+AUTHOR: adam-james
#+STARTUP: overview
#+PROPERTY: header-args :cache yes :noweb yes :results inline :mkdirp yes :padline yes :async
#+HTML_DOCTYPE: html5
#+OPTIONS: toc:2 num:nil html-style:nil html-postamble:nil html-preamble:nil html5-fancy:t

** deps.edn
#+NAME: deps.edn
#+begin_src clojure :tangle ./deps.edn
{:paths
 ["src" "tests" "resources"]

 :deps 
 {org.clojure/clojurescript  {:mvn/version "1.10.773"}
  reagent                    {:mvn/version "0.10.0"}
  forge/forge                {:local/root  "../../dev/forge"}
  stylo/stylo                {:local/root  "../../dev/stylo"}
  baton/baton                {:local/root  "../../dev/baton"}
  com.bhauman/figwheel-main  {:mvn/version "0.2.6"}}

 :aliases
 {:dev {:main-opts ["-m" "figwheel.main" "--build" "dev" "--repl"]}
  :prod {:main-opts ["-m" "figwheel.main" "-b" "prod"]}}}

#+end_src

** build-config
#+NAME: dev.cljs.edn
#+BEGIN_SRC clojure :tangle ./dev.cljs.edn
^{:watch-dirs ["src"]
  :css-dirs ["resources"]}
{:main dumbbells.design}

#+END_SRC

#+NAME: prod.cljs.edn
#+BEGIN_SRC clojure :tangle ./prod.cljs.edn
^{:watch-dirs ["src"]
  :css-dirs ["resources"]}
{:main dumbbells.design
 :optimizations :advanced}

#+END_SRC

** embed
This is a way to create single file 'embedded' apps.
#+BEGIN_SRC clojure tangle ./embed
#!/usr/bin/env bb

(defn base [style script]
  (str "<!DOCTYPE html>
<html>
<head>
<title>asdf-app</title>
<style>"

style

"</style>
</head>
<body>
<div id=\"root\"></div>
<script>"
  
script

"</script>
</body>
</html>"))

(def style (slurp "resources/public/style.css"))
(def script (slurp "target/public/cljs-out/prod-main.js"))

(spit "out.html" (base style script))

#+END_SRC

** readme
#+BEGIN_SRC markdown :tangle ./readme.md
# design-dumbbells

A parametric design document for building dumbbells out of metal.

#+END_SRC
* resources
*** html
#+NAME: index.html
#+BEGIN_SRC html :tangle ./resources/public/index.html
<!DOCTYPE html>
<html>
  <head>
    <title>asdf-app</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
  </head>
  <body>
    <div id="root"></div>
    <script src="/cljs-out/dev-main.js"></script>
  </body>
</html>
#+END_SRC

*** css
#+NAME: style.css
#+BEGIN_SRC css :tangle ./resources/public/style.css
#root {
  margin: 0;
  padding: 0;
}

,*, *:after, *:before {
  box-sizing: border-box;
}

body {
  font: 18px/1.6 Georgia, "Times New Roman", Times, serif;
}

table, input {
  font-size: 16px;
}

button, select {
  font-size: 14px;
}

h1, h2, h3, h4, h5, h6 {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  line-height: 1.2;
}

/*
#root svg {
  border: black solid 1px;
}
*/

text {
  font-family: monospace;
  /* fill: #2e3440; */
  stroke: none;
}

.ln {
  stroke: #2e3440;
  stroke-width: 2px;
  stroke-linecap: round;
}

.ln-d {
  stroke: #2e3440;
  stroke-width: 2px;
  stroke-linecap: round;
  stroke-dasharray: 4, 5;
}

.clr {
  fill: none;
}

.attn {
  fill: rgb(234, 82, 111);
}

.attn-ln {
  stroke: rgb(234, 82, 111);
  stroke-width: 3px;
}

.face {
  fill: #a3be8c;
  fill-rule: evenodd;
}

rect, line, path, polygon, polyline, circle {
  vector-effect: non-scaling-stroke;
}

table {
  width: auto;
}

th, td {
  vertical-align: top;
  padding: 5px;
  border: 1px solid #ddd;
}

table ul {
  list-style-type: none;
  padding-left: 4px;
  margin: 0;
}

table li:before {
  content: â–¢ ;
}

table p {
  margin: 0;
}

.figure {
  padding-left: 7px;
}

.figure p {
  font-size: smaller;
  font-style: italic;
}

code {
  font-size: 0.75em;
}

code.block {
  padding: 8px;
  background: #2e3440;
  color: #dedee9;
  white-space: pre-wrap;
  display: inline-block;
  width: 100%;
}

.hidden {
  display: none;
}

@media (print) {

  .pagebreak {
    page-break-after: always;
  }

}

body {
  margin: 10px auto;
  max-width: 760px;
  color: #444;
  padding: 0 20px;
}

a {
  color: #07c;
  text-decoration: none;
}

a:hover {
  color: #059;
  text-decoration: underline;
}

hr {
  border: 0;
  margin: 25px 0;
}

table {
  border-spacing: 0;
  border-collapse: collapse;
  text-align: left;
  padding-bottom: 25px;
}

td, th {
  padding: 5px;
  vertical-align: bottom;
}

td, th, hr {
  border-bottom: 1px solid #ddd;
}

pre {
  padding: 8px;
  white-space: pre-wrap;
}

button, select {
  background: #ddd;
  border: 0;
  padding: 9px 20px;
}

input {
  padding: 5px;
  vertical-align: bottom;
}

button:hover {
  background: #eee;
}

textarea {
  border-color: #ccc;
}

#+END_SRC

* ns
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(ns ^:figwheel-hooks dumbbells.design
  (:require [reagent.dom :as rdom]
            [reagent.core :as r]
            [reagent.ratom :refer [reaction]]
            [stylo.shape :as shape]
            [stylo.svg :as svg]
            [stylo.parser :as parser]
            [baton.core :as b]
            [forge.proto :as f]))

#+END_SRC

* state
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(def state
  (r/atom
   {:scale 25
    :view-rotation 0

    :plate-radius 2.5
    :plate-thickness 0.115
    :plate-n 4

    :handle-radius (/ 1.315 2)
    :handle-thickness 0.083
    :grip-width 6.5

    :material-density 0.285
    :desired-mass 5}))

#+END_SRC

* parts
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn hex-plate
  [or ir t]
  (let [sk (f/union
            (f/circle ir)
            (f/polygon
             (f/regular-polygon-pts or 6)))]
    (-> sk
        (f/extrude t)
        (f/rotate [0 0 30])
        (f/translate [0 0 0]))))

(defn tube-rnd
  [r t h]
  (-> (f/union (f/circle r) 
               (f/circle (- r t)))
      (f/extrude h)))

(defn plate
  [state]
  (let [or (r/cursor state [:plate-radius])
        ir (r/cursor state [:handle-radius])
        t (r/cursor state [:plate-thickness])]
    (hex-plate @or @ir @t)))

(defn handle
  [state]
  (let [r (r/cursor state [:handle-radius])
        t (r/cursor state [:handle-thickness])
        l1 (r/cursor state [:grip-width])
        pn (r/cursor state [:plate-n])
        pt (r/cursor state [:plate-thickness])
        l2 (* @pt @pn)]
    (tube-rnd @r @t (+ @l1 l2)))) 

#+END_SRC

* assembly
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(declare calculate-plate-n)
(defn assembly
  [state]
  (let [plate-r (r/cursor state [:plate-radius])
        plate-t (r/cursor state [:plate-thickness])
        grip-w (r/cursor state [:grip-width])

        plate-n (calculate-plate-n state 60) #_(r/cursor state [:plate-n])
        
        handle-l (+ @grip-w (* plate-n @plate-t))

        grip (-> (handle state)
                 (f/translate [0 0 (/ handle-l -2.0)])
                 (f/rotate [22.5 90 0]))
        hex (-> (plate state)
                (f/rotate [0 90 0]))
        
        rstack (reduce 
                f/union
                (for [n (range (/ plate-n 2))]
                  (f/translate 
                   hex 
                   [(+ (- (/ handle-l 2)) (* n @plate-t)) 0 0])))
        lstack (f/rotate rstack [0 180 0])]
    
    (reduce f/union [lstack grip rstack])))

#+END_SRC

* property-calculations
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn plate-volume
  [plate]
  (let [[bvmax bvmin] (f/bounding-box-corners plate)
        height (Math/abs (- (last bvmax) (last bvmin)))
        pts (last (first (:history (last (first (:history plate))))))
        a1 (f/polygon-area pts)
        ir (last (first (:history (second (first (:history plate))))))
        a2 (* Math/PI (f/sq ir))]
    (* (- a1 a2) height)))

(defn tube-volume
  [tube]
  (let [[bvmax bvmin] (f/bounding-box-corners tube)
        height (Math/abs (- (last bvmax) (last bvmin)))
        or (last (first (:history (second (first (:history tube))))))
        a1 (* Math/PI (f/sq or))
        ir (last (first (:history (last (first (:history tube))))))
        a2 (* Math/PI (f/sq ir))]
    (* (- a1 a2) height)))

(defn calculate-plate-n
  [state max]
  (let [desired-mass (r/cursor state [:desired-mass])
        density (r/cursor state [:material-density])
        
        handle-r (r/cursor state [:handle-radius])
        handle-t (r/cursor state [:handle-thickness])
        plate-t (r/cursor state [:plate-thickness])
        grip-w (r/cursor state [:grip-width])

        plate-m (* (plate-volume (plate state)) 
                   @density)
        grip-m (* (tube-volume (tube-rnd @handle-r @handle-t @grip-w)) 
                  @density)
        handle-slice-m (* (tube-volume (tube-rnd @handle-r @handle-t @plate-t)) 
                          @density)
        
        ns (for [n (range 2 max 2)]
             (let [total-m (+ grip-m (* n (+ plate-m handle-slice-m)))]
               [(- @desired-mass total-m) n]))]
    (second (first (sort-by first (filter #(pos? (first %)) ns))))))

(defn update-plate-n!
  [state max]
  (let [new-n (calculate-plate-n state max)
        n (r/cursor state [:plate-n])]
    (reset! n new-n)
    new-n))

#_(defn calculate-hex-r
  [min-r max-r t mass density]
  (let [f #(* (plate-volume (plate %)) density)
        rs (for [r (range min-r max-r 0.01)]
             [(Math/abs (- (f r) mass)) r])]
    (second (first (sort-by first rs)))))

(defn total-mass
  [state]
  (let [density (r/cursor state [:material-density])
        pn (calculate-plate-n state 60)
        plate  (* (plate-volume (plate state)) @density)
        handle (* (tube-volume (handle state)) @density)]
    (+ (* pn plate) handle)))

#+END_SRC

* part-views
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn handle-front
  [state]
  (let [zoom (r/cursor state [:scale])
        handle-r (r/cursor state [:handle-radius])]
    [:<>
     (svg/fig
      1 "Front View of Handle"
      (svg/dwg-2d
       [200 100 1]
       (svg/scale
        @zoom
        (svg/g
         (svg/style-element
           {:stroke "blue"
            :fill "blue"}
           (svg/g
            (->> (svg/text "r") 
                 (svg/translate [(+ -4.125 @handle-r) 4.65])
                 (svg/scale 0.05))
            (svg/line [0 0] [@handle-r 0])))
        
         (shape/render-curves 
          (handle state)
          shape/top-xf
          "black")))))]))

#+END_SRC

#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn handle-right
  [state]
  (let [zoom (r/cursor state [:scale])
        grip-w (r/cursor state [:grip-width])]
    [:<>
     (svg/fig
      2 "Right View of Handle"
      (svg/dwg-2d
       [250 100 1]
       (svg/scale
        @zoom
        (svg/translate 
         [-100 0]
         (svg/g
          
          (svg/style-element
           {:stroke "blue"
            :fill "blue"}
           (svg/g
            (->> (svg/text "L") 
                 (svg/translate [(+ -4.375 (/ @grip-w 2)) 3.375])
                 (svg/scale 0.05))
            (svg/line [0 -1] [@grip-w -1])))
  
          (svg/style-element
           {:stroke "red"
            :fill "red"}
           (svg/g
            (->> (svg/text "GRIP-WIDTH") 
                 (svg/translate [(+ (* 10 -4.375) -1.75 (/ @grip-w 2)) 6.25])
                 (svg/scale 0.05))
            (svg/line [0 1] [@grip-w 1])))
         
          (shape/render-curves 
           (-> (handle state)
               (f/translate [0 0 0])
               (f/rotate [0 90 0]))
           shape/right-xf
           "black"))))))]))

(defn plate-front
  [state]
  (let [zoom (r/cursor state [:scale])
        plate-r (r/cursor state [:plate-radius])]
    [:<>
     (svg/fig
      3 "Front View of Hex Plate"
      (svg/dwg-2d
       [250 250 1]
       (svg/scale
        @zoom
        (svg/g
         
         (svg/style-element
          {:stroke "blue"
           :fill "blue"}
          (svg/g
           (->> (svg/text "R") 
                (svg/translate [(+ -4.5 (/ @plate-r 2)) 4.375])
                (svg/scale 0.05))
           (svg/line [0 0] [@plate-r 0])))

         (shape/render-curves
          (-> (plate state)
              (f/rotate [0 0 30]))
          shape/top-xf
          "black")))))]))

(defn plate-right
  [state]
  (let [zoom (r/cursor state [:scale])
        plate-r (r/cursor state [:plate-radius])]
    [:<>
     (svg/fig
      4 "Right View of Hex Plate"
      (svg/dwg-2d
       [250 250 1]
       (svg/scale
        @zoom
        (svg/g
         
         (svg/style-element
          {:stroke "blue"
           :fill "blue"}
          (svg/g
           (->> (svg/text "T") 
                (svg/translate [(+ -4.5 (/ @plate-r 2)) 4.375])
                (svg/scale 0.05))
           (svg/line [0 0] [@plate-r 0])))

         (shape/render-curves
          (-> (plate state)
              (f/rotate [0 90 30]))
          shape/right-xf
          "black")))))]))

#+END_SRC

* assembly-views
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn assembly-iso
  [state]
  (let [zoom (r/cursor state [:scale])
        rotation (r/cursor state [:view-rotation])]
    [:<>
     (svg/fig
      2 "Isometric View of Assembly"
      (svg/dwg-2d
       [300 250 1]
       (shape/axes-iso)
       (svg/scale 
        @zoom
        (svg/g
         (shape/render-curves 
          (-> (assembly state) 
              (f/rotate [0 0 @rotation]))
          shape/isometric-xf
          "black")))))]))

#+END_SRC

* parameter-view
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(defn view-controls [state]
  (let [zoom   (r/cursor state [:scale])
        rot    (r/cursor state [:view-rotation])]
    [:div
     [:div 
      [b/slider zoom 1 100 1]
      [:span "  zoom: " @zoom]]
     [:div 
      [b/slider rot 0 360 1]
      [:span "rotate: " @rot]]])) 

(defn handle-parameters [state]
  (let [grip-w (r/cursor state [:grip-width])
        handle-r (r/cursor state [:handle-radius])
        handle-t (r/cursor state [:handle-thickness])]
    [:div
     [:div 
      [b/slider grip-w 4.0 12.0 0.25]
      [:span "grip width: " @grip-w]]
     [:div
      [b/slider handle-r 1.0 2.5 0.15]
      [:span "handle r: " @handle-r]]
     [:div
      [b/slider handle-t 0.065 0.25 0.005]
      [:span "handle thickness: " @handle-t]]]))

(defn plate-parameters [state]
  (let [plate-r (r/cursor state [:plate-radius])
        plate-t (r/cursor state [:plate-thickness])]
    [:div
     [:div
      [b/slider plate-r 2.0 16.0 0.125]
      [:span "plate R: " @plate-r]]
     [:div
      [b/slider plate-t 0.065 0.25 0.005]
      [:span "plate thickness: " @plate-t]]]))
  
(defn parameters [state]
  (let [zoom (r/cursor state [:scale])
        rot (r/cursor state [:view-rotation])
        plate-t (r/cursor state [:plate-thickness])
        plate-r (r/cursor state [:plate-radius])
        desired-mass (r/cursor state [:desired-mass])
        plate-n (r/cursor state [:plate-n])]
    [:div
     [:div 
      [b/slider plate-t 0.085 0.75 0.005]
      [:span "plate t: " @plate-t]]
     [:div
      [b/slider plate-r 1.5 5.0 0.25]
      [:span "plate R: " @plate-r]]
     [:div
      [b/slider desired-mass 5 100 2.5]
      [:span "Desired Mass: " @desired-mass " lbs"]]
     [:div
      [:span "Number of plates : " @plate-n]]]))

#+END_SRC

* doc
Learn how to use cursors, it is better to build cursors and deref at use site rather than deref the entire state.

#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(def title "## Dumbbells Parametric Design Doc.")
(def intro (str 
"This design is parametric in the desired mass. Given a plate thickness, maximum radius of hex shapes, and the desired mass of the finished dumbbell, this app will calculate the design for you.

You can use this in your browser, just try adjusting some settings!
"))

(defn markdown
  [& strings]
  (mapcat (comp parser/->hiccup parser/doc-parse) strings))

(def intro-component
  (markdown title intro))

(defn doc []
  [:<>
   intro-component
   
   [:section
    (markdown
     "### Handle Configuration"
     
     "Set the parameters according to the tube size you will be using for the handle part.
")

    [handle-parameters state]
    [:div {:style {:display "flex"}}
     [handle-front state]
     [handle-right state]]]

   [:section
    (markdown
     "### Hex Plate Configuration"
     
     "Set the parameters according to the flat sheet you will be using to make the plates.
")

    [plate-parameters state]
    [:div {:style {:display "flex"}}
     [plate-front state]
     [plate-right state]]]
    
   
   [parameters state]
   
   
   [assembly-iso state]
   [view-controls state]])

#+END_SRC

* mount
#+BEGIN_SRC clojure :tangle ./src/dumbbells/design.cljs
(b/mount doc)
(defn ^:after-load re-render [] (b/mount doc))
(defonce go (do (b/mount doc) true))
#+END_SRC
